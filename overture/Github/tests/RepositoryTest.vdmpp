class RepositoryTest
types
-- TODO Define types here
values
-- TODO Define values here
instance variables
	o : Account := new Organization("feup");
	r : Repository := new Repository("mfes", o, true);

operations
	private testConstructor: () ==> ()
	testConstructor() == (
		let org = new Organization("org") in (
			let repo = new Repository("test", org, true) in (
				TestUtils`assertTrue(repo.name = "test");
				TestUtils`assertTrue(repo.isRepoPrivate());
				TestUtils`assertTrue(card repo.collaborators = 0);
			);
		);
		
		let usr = new User("usr") in (
			let repo = new Repository("test2", usr, false) in (
				TestUtils`assertTrue(card repo.collaborators = 1);
			);
		);
		
		TestUtils`assertTrue(r.getDefaultBranch().name = "master");
		TestUtils`assertTrue(card dom r.branches = 1);
		TestUtils`assertTrue(r.branches("master") = r.getDefaultBranch());
	);

	private testSetDescription: () ==> ()
	testSetDescription() == (
		r.setDescription(o, "Projeto de MFES");
		TestUtils`assertTrue(r.getDescription() = "Projeto de MFES");
		
		r.setDescription(o, "description");
		TestUtils`assertTrue(r.getDescription() = "description");
	);
	
	private testAddCollaborator: () ==> ()
	testAddCollaborator() == (
		let u1 = new User("one") in (
			r.addCollaborator(u1);
			TestUtils`assertTrue(r.collaborators = {u1});
			
			let u2 = new User("two") in (
				r.addCollaborator(u2);
				TestUtils`assertTrue(r.collaborators = {u1, u2});
			);
		);
	);
	
	private testAddTag: () ==> ()
	testAddTag() == (
		let tag1 = new Tag("AI") in (
			r.addTag(tag1);
			TestUtils`assertTrue(r.tags = {tag1});
			
			let tag2 = new Tag("WebDev") in (
				r.addTag(tag2);
				TestUtils`assertTrue(r.tags = {tag1, tag2});
			);
		);
	);
	
	private testCreateBranch: () ==> ()
	testCreateBranch() == (
		let branch = r.createBranch("develop", true) in (
			let b = r.branches("develop") in (
				TestUtils`assertTrue(branch.name = b.name);
				TestUtils`assertTrue(branch.name = "develop");
				
				TestUtils`assertTrue(branch.isProtected = b.isProtected);
				TestUtils`assertTrue(branch.isProtected);
			);
		);
		TestUtils`assertTrue(card dom r.branches = 2);
	);
	
	private testSetDefaultBranch: () ==> ()
	testSetDefaultBranch() == (
		TestUtils`assertTrue(r.getDefaultBranch().name = "master");
		r.setDefaultBranch("develop");
		TestUtils`assertTrue(r.getDefaultBranch().name = "develop");
	);
	
	private testCommit: () ==> ()
	testCommit() == (
		let usr = new User("contributor") in (
			r.addCollaborator(usr);
			TestUtils`assertTrue(len r.getDefaultBranch().getCommits() = 0);
			r.commit(usr, r.getDefaultBranch().name, "hash", new Date(2018, 12, 30, 22, 19));
			TestUtils`assertTrue(len r.getDefaultBranch().getCommits() = 1);
			
			-- Can also contribute to public repositories
			let pub = new Repository("public", o, false) in (
				pub.commit(usr, pub.getDefaultBranch().name, "hash", new Date(2018, 12, 30, 22, 20));
				TestUtils`assertTrue(len pub.getDefaultBranch().getCommits() = 1);
			);
		);
	);
	
	private testCommitHistory: () ==> ()
	testCommitHistory() == (
		TestUtils`assertTrue(len r.getDefaultBranch().getCommits() = 1);
		r.setDefaultBranch("master");
		TestUtils`assertTrue(len r.getDefaultBranch().getCommits() = 0);
	);
	
	private testSetPrivacy: () ==> ()
	testSetPrivacy() == (
		TestUtils`assertTrue(r.isRepoPrivate());
		r.setPrivacy(o, false);
		TestUtils`assertFalse(r.isRepoPrivate());
	);
	
	private testAddRelease: () ==> ()
		testAddRelease() ==
		(
			TestUtils`assertTrue(r.numReleases() = 0);
			r.addRelease(new Release("v1.1"));
			TestUtils`assertTrue(r.numReleases() = 1);
			r.addRelease(new Release("v1.2"));
			TestUtils`assertTrue(r.numReleases() = 2);
		);
	
	public static main: () ==> ()
	main() == (
		let r = new RepositoryTest() in (
			r.testConstructor();
			r.testSetDescription();
			r.testAddCollaborator();
			r.testAddTag();
			r.testAddRelease();
			r.testCreateBranch();
			r.testSetDefaultBranch();
			r.testCommit();
			r.testCommitHistory();
			r.testSetPrivacy();
		);
	);

functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end RepositoryTest