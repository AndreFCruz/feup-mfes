class Date
types
-- TODO Define types here
values
	public static startYear = 2000;

instance variables
	private year: nat1;
	private month: nat1;
	private day: nat1;
	private hour: nat;
	private minute: nat;
	
	inv year >= startYear;
	inv month >= 1 and month <= 12;
	inv day >= 1 and day <= daysOfMonth(year, month);
	inv hour >= 0 and hour < 24;
	inv minute >= 0 and minute < 60;

operations
	public Date: nat * nat * nat1 * nat1 * nat1 ==> Date
	Date(mi, h, d, mo, y) == (
		year := y;
		month := mo;
		day := d;
		hour := h;
		minute := mi;
		return self;
	) -- No need for pre conditions -> assured by instance variables invariants
	post year = y and month = mo and day = day and hour = h and minute = mi;

functions
	private static isLeapYear(y: nat1) res: bool == y mod 4 = 0
	pre y >= startYear;

	private static daysOfMonth(y, m: nat1) res : nat == (
		cases m :
			1, 3, 5, 7, 8, 10, 12 -> 31,
			4, 6, 9, 11 -> 30,
			2 -> if isLeapYear(y) then 29 else 28
		end
	)
	pre m >= 1 and m <= 12;

traces
-- TODO Define Combinatorial Test Traces here
end Date