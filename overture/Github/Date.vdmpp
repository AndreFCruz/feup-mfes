class Date
types
-- TODO Define types here
values
	public static startYear = 2000;

instance variables
	private year: nat1;
	private month: nat1;
	private day: nat1;

operations
	public Date: nat1 * nat1 * nat1 ==> Date
	Date(d, m, y) == (
		year := y;
		month := m;
		day := d;
		return self;
	)
	pre (y >= startYear) and (m >= 1 and m <= 12) and (d >= 1 and d <= daysOfMonth(y, m))
	post year = y and month = m and day = day;

functions
	private static isLeapYear(y: nat1) res: bool == y mod 4 = 0
	pre y >= startYear;

	private static daysOfMonth(y, m: nat1) res : nat == (
		cases m :
			1, 3, 5, 7, 8, 10, 12 -> 31,
			4, 6, 9, 11 -> 30,
			2 -> if isLeapYear(y) then 29 else 28
		end
	)
	pre m >= 1 and m <= 12;

traces
-- TODO Define Combinatorial Test Traces here
end Date