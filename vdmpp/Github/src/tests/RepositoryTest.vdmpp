class RepositoryTest

instance variables
	o : Account := new Organization("feup");
	r : Repository := new Repository("mfes", o, true);
	u : User := new User("contributtor");

operations
	private testConstructor: () ==> ()
	testConstructor() == (
		let org = new Organization("org"), repo = new Repository("test", org, true) in (
			TestUtils`assertTrue(repo.name = "test");
			TestUtils`assertTrue(repo.isRepoPrivate());
			TestUtils`assertTrue(card repo.collaborators = 0);
		);
		
		let repo = new Repository("test2", u, false) in (
			TestUtils`assertTrue(card repo.collaborators = 1);
		);
		
		TestUtils`assertTrue(r.getDefaultBranch().name = "master");
		TestUtils`assertTrue(card dom r.branches = 1);
		TestUtils`assertTrue(r.branches("master") = r.getDefaultBranch());
	);

	private testSetDescription: () ==> ()
	testSetDescription() == (
		r.setDescription(o, "Projeto de MFES");
		TestUtils`assertTrue(r.getDescription() = "Projeto de MFES");
		
		r.setDescription(o, "description");
		TestUtils`assertTrue(r.getDescription() = "description");
	);
	
	private testAddCollaborator: () ==> ()
	testAddCollaborator() == (
		let u2 = new User("two") in (
			r.addCollaborator(u);
			TestUtils`assertTrue(r.collaborators = {u});
			
			r.addCollaborator(u2);
			TestUtils`assertTrue(r.collaborators = {u, u2});
		);
	);
	
	private testAddTag: () ==> ()
	testAddTag() == (
		let tag1 = new Tag("AI"), tag2 = new Tag("WebDev") in (
			r.addTag(tag1);
			TestUtils`assertTrue(r.tags = {tag1});
			
			r.addTag(tag2);
			TestUtils`assertTrue(r.tags = {tag1, tag2});
		);
	);
	
	private testCreateBranch: () ==> ()
	testCreateBranch() == (
		let branch = r.createBranch("develop", true), b = r.branches("develop") in (
			TestUtils`assertTrue(branch.name = b.name);
			TestUtils`assertTrue(branch.name = "develop");
			
			TestUtils`assertTrue(branch.isProtected = b.isProtected);
			TestUtils`assertTrue(branch.isProtected);
		);
		TestUtils`assertTrue(card dom r.branches = 2);
	);
	
	private testSetDefaultBranch: () ==> ()
	testSetDefaultBranch() == (
		TestUtils`assertTrue(r.getDefaultBranch().name = "master");
		r.setDefaultBranch("develop");
		TestUtils`assertTrue(r.getDefaultBranch().name = "develop");
	);
	
	private testCommit: () ==> ()
	testCommit() == (
		let usr = new User("contributor"), pub = new Repository("public", o, false) in (
			r.addCollaborator(usr);
			TestUtils`assertTrue(len r.getDefaultBranch().getCommits() = 0);
			r.commit(usr, r.getDefaultBranch().name, "hash2131434", new Date(2018, 12, 30, 22, 19));
			r.commit(usr, r.getDefaultBranch().name, "hash2123123", new Date(2018, 12, 30, 22, 20));
			r.commit(usr, "master", "hash2123199", new Date(2019, 01, 11, 14, 34));
			TestUtils`assertTrue(len r.getDefaultBranch().getCommits() = 2);
			
			-- Can also contribute to public repositories
			pub.commit(usr, pub.getDefaultBranch().name, "hash434567", new Date(2018, 12, 30, 22, 21));
			TestUtils`assertTrue(len pub.getDefaultBranch().getCommits() = 1);
		);
	);
	
	private testCommitHistory: () ==> ()
	testCommitHistory() == (
		TestUtils`assertTrue(len r.getDefaultBranch().getCommits() = 2);
		r.setDefaultBranch("master");
		TestUtils`assertTrue(len r.getDefaultBranch().getCommits() = 1);
	);
	
	private testSetPrivacy: () ==> ()
	testSetPrivacy() == (
		TestUtils`assertTrue(r.isRepoPrivate());
		r.setPrivacy(o, false);
		TestUtils`assertFalse(r.isRepoPrivate());
	);
	
	private testAddRelease: () ==> ()
	testAddRelease() ==
		(
			TestUtils`assertTrue(r.numReleases() = 0);
			r.addRelease(new Release("v1.1", new Date(2018, 12, 30, 22, 28)));
			TestUtils`assertTrue(r.numReleases() = 1);
			r.addRelease(new Release("v1.2", new Date(2018, 12, 30, 22, 29)));
			TestUtils`assertTrue(r.numReleases() = 2);
		);
		
	private testMergeBranches: () ==> ()
	testMergeBranches() == (
		TestUtils`assertTrue(card dom r.branches = 2);
		let c1 = r.branches("develop").getCommits(),
		c2 = r.getDefaultBranch().getCommits() in (
			TestUtils`assertTrue(len c1 = 2);
			TestUtils`assertTrue(len c2 = 1);
			r.mergeBranches(u, "master", "develop", false);
			let mc = r.getDefaultBranch().getCommits() in (
				TestUtils`assertTrue(forall c in set elems c1 & c in set elems mc);
				TestUtils`assertTrue(forall c in set elems c2 & c in set elems mc);
				TestUtils`assertTrue(len c1 + len c2 = len mc);
				TestUtils`assertTrue(len mc = 3);
			);
		);
		TestUtils`assertTrue(card dom r.branches = 2);
			
		let branch = r.createBranch("feature", true) in (
			TestUtils`assertTrue(card dom r.branches = 3);
			TestUtils`assertTrue(branch in set rng r.branches);
			r.mergeBranches(u, "develop", "feature", true); --Branch is deleted on merge
			TestUtils`assertTrue(card dom r.branches = 2);
			TestUtils`assertTrue(branch not in set rng r.branches);
		);
	);
	
	private testDeleteBranch: () ==> ()
	testDeleteBranch() == (
		let branch = r.createBranch("other-feature", true) in (
			TestUtils`assertTrue(card dom r.branches = 3);
			TestUtils`assertTrue(branch in set rng r.branches);
			r.delBranch(u, "other-feature");
			TestUtils`assertTrue(card dom r.branches = 2);
			TestUtils`assertTrue(branch not in set rng r.branches);
		);
	);
	
	public static main: () ==> ()
	main() == (
		let rt = new RepositoryTest() in (
			rt.testConstructor();
			rt.testSetDescription();
			rt.testAddCollaborator();
			rt.testAddTag();
			rt.testAddRelease();
			rt.testCreateBranch();
			rt.testSetDefaultBranch();
			rt.testCommit();
			rt.testCommitHistory();
			rt.testSetPrivacy();
			rt.testMergeBranches();
			rt.testDeleteBranch();
		);
	);

end RepositoryTest