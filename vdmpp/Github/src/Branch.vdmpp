class Branch

instance variables
	public name: VDMUtils`String;
	public isProtected: bool;

	private commits: seq of Commit := []; -- Chronological order assured by invariant

	inv forall i1, i2 in set inds commits & 
		i1 < i2 => mk_Date`DateComparable(commits(i1).timestamp) < mk_Date`DateComparable(commits(i2).timestamp);
	
operations
	public Branch: VDMUtils`String * bool ==> Branch
	Branch(n, prot) == (
		name := n;
		isProtected := prot;
		return self;
	)
	pre n <> []
	post name = n and isProtected = prot;
	
	public commit: Commit ==> ()
	commit(c) == (
		commits := commits ^ [c];
	)
	pre c not in set elems commits
	post c in set elems commits;

	-- Merges branches by adding selected branch commits to this branches commits and sorting them by Date
	-- Sort is done using bubblesort
	public mergeBranch: Branch ==> ()
	mergeBranch(branch) == (
		dcl all_commits: seq of Commit := commits ^ branch.getCommits();
		dcl sorted_commits: seq of Commit := all_commits;
		for i = len all_commits to 1 by -1 do
			for j = 1 to i-1 do
				if mk_Date`DateComparable(sorted_commits(j).timestamp) < mk_Date`DateComparable(sorted_commits(j+1).timestamp)
					then (dcl temp: Commit := sorted_commits(j);
						sorted_commits(j) := sorted_commits(j+1);
						sorted_commits(j+1) := temp
		);
		commits := sorted_commits;
	)
	post forall c in set elems branch.getCommits() & c in set elems commits; -- Commits ordered is assured by invariant

	public pure getCommits: () ==> seq of Commit
	getCommits() == return commits;
	
end Branch