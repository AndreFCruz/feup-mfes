class Repository
	
instance variables
	
	public name: VDMUtils`String;
	private isPrivate: bool;
	private description: VDMUtils`String := [];

	private owner: Account;
	private defaultBranch: Branch;
	public tags: set of Tag := {};
	public collaborators: set of User := {};
	public releases: seq of Release := [];
	public branches: map VDMUtils`String to Branch := { |-> };
	public issues: map VDMUtils`String to Issue := { |-> };
		
	inv defaultBranch in set rng branches;
	inv branches(defaultBranch.name) = defaultBranch;
	
	-- All issues' assignees are contributors
	inv forall issue in set rng issues & (forall ass in set issue.assignees & ass in set collaborators);
	
	inv forall i1, i2 in set inds releases & 
		i1 < i2 => mk_Date`DateComparable(releases(i1).timestamp) < mk_Date`DateComparable(releases(i2).timestamp);
	
operations
	public Repository: VDMUtils`String * Account * bool ==> Repository
	Repository(n, acc, priv) == (
		name := n;
		isPrivate := priv;
		owner := acc;
		if isofclass(User, owner) then collaborators := {owner};
			
		let master = new Branch("master", true) in ( -- Github creates default branch master
			defaultBranch := master;
			branches := { "master" |-> master };
		);
		return self;
	)
	pre n <> []
	post name = n and isPrivate = priv and owner = acc and
		(isofclass(Organization, owner) or (isofclass(User, owner) and owner in set collaborators)) and
		defaultBranch.name = "master" and card dom branches = 1;
		
	
	public addRelease: Account * Release ==> ()
	addRelease(acc, rel) == releases := releases ^ [rel]
	pre (if isofclass(User, acc) then narrow_(acc, User) in set collaborators else acc = owner) and
		rel.name not in set {r.name | r in seq releases}
	post releases(len releases) = rel;
	
	public addTag: Account * Tag ==> ()
	addTag(acc, tag) == tags := tags union {tag}
	pre acc = owner
	post tag in set tags;
		
	public createBranch: VDMUtils`String * bool ==> Branch
	createBranch(n, prot) == (
		let b = new Branch(n, prot) in (
			branches(n) := b;
			return b;
		);
	)
	pre n not in set dom branches
	post let b = branches(n) in b.name = n and b.isProtected = prot;
	
	public delBranch: User * VDMUtils`String ==> ()
	delBranch(usr, n) ==	branches := {n} <-: branches
	pre usr in set collaborators and
		n <> defaultBranch.name and n in set dom branches --Can not delete default branch
	post n not in set dom branches;
	
	public commit: User * VDMUtils`String * VDMUtils`String * Date ==> ()
	commit(usr, branchName, hash, date) == (
		branches(branchName).commit(new Commit(hash, usr, date));
	)
	pre (usr in set collaborators or not isPrivate) and
		branchName in set dom branches;
		
	public addCollaborator: Account * User ==> ()
	addCollaborator(acc, usr) == collaborators := collaborators union {usr}
	pre acc = owner
	post usr in set collaborators;
	
	-- If delete is true, src shall be deleted after merge
	public mergeBranches: User * VDMUtils`String * VDMUtils`String * bool ==> ()
	mergeBranches(usr, dest, src, delete) == (
		branches(dest).mergeBranch(branches(src));
		if delete then delBranch(usr, src);
	)
	pre usr in set collaborators and
		branches(dest) in set rng branches and
		branches(src) in set rng branches
	post (if delete then src not in set dom branches else src in set dom branches) and
		dest in set dom branches;
		
	public addIssue: Account * Issue ==> ()
	addIssue(acc, issue) == issues(issue.title) := issue
	pre issue.title not in set dom issues and issue not in set rng issues and
		((if isofclass(User, acc) then narrow_(acc, User) in set collaborators else acc = owner) or not isPrivate)
	post issues(issue.title) = issue;
		
	-- Getters
	public pure getDefaultBranch: () ==> Branch
	getDefaultBranch() == return defaultBranch;
	
	public pure getDescription: () ==> VDMUtils`String
	getDescription() == return description;
	
	public pure getOwner: () ==> VDMUtils`String
	getOwner() == return owner.username;
	
	public pure numReleases: () ==> nat
	numReleases() == return len releases;
	
	public pure isRepoPrivate: () ==> bool
	isRepoPrivate() == return isPrivate;
	
	-- Setters
	public setDefaultBranch: Account * VDMUtils`String ==> ()
	setDefaultBranch(acc, bName) == defaultBranch := branches(bName)
	pre acc = owner and bName in set dom branches
	post defaultBranch.name = bName;

	public setDescription: Account * VDMUtils`String ==> ()
	setDescription(acc, desc) == description := desc
	pre acc = owner
	post description = desc;
	
	public setPrivacy: Account * bool ==> ()
	setPrivacy(acc, privacy) == isPrivate := privacy
	pre acc = owner
	post isPrivate = privacy;
	
end Repository